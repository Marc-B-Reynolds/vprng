# Dumb mini makefile:
# 0) assumes clang/GCC like options
# 1) every .c file is to be built into an executable
# 2) fungus growth!

# if CC is the default (not environment varible nor supplied to make, then default
ifeq ($(origin CC),default)
  CC = clang-15
endif

IDIRS  = -I.. 
CFLAGS = -g3 -O3 ${IDIRS} -march=native -Wall -Wextra -Wconversion -Wno-unused-function -Wno-empty-body -fno-math-errno
LDLIBS = -lm

# list of all variants
VAR      := ${filter-out vprng, $(basename $(notdir $(wildcard ../*.h)))}
VTARGETE := makedata self_check
VTARGETS := $(strip $(foreach suffix, $(VAR), $(foreach exe, $(VTARGETE), $(exe)_$(suffix))))


FSRC     := ${wildcard *.c}
SRC      := ${filter-out xorshift.c vprng_testu01.c, ${FSRC}}
HEADERS  := ${wildcard *.h}
TARGETS  := ${SRC:.c=}
FTARGETS := ${FSRC:.c=}

# OS detection.
ifeq ($(OS),Windows_NT)
# Default to GCC on Windows (presumably MinGW).
  CC         = gcc
# Force the .exe suffix so that Makefile looks at the correct
# target when deciding what to rebuild.
  EXESUFFIX := .exe
  TARGETS   := $(addsuffix $(EXESUFFIX),$(TARGETS))
  FTARGETS  := $(addsuffix $(EXESUFFIX),$(FTARGETS))
  VTARGETS  := $(addsuffix $(EXESUFFIX),$(VTARGETS))
# Force static linkning so that binary doesn't require
# MinGW's DLLs to run.
  LDFLAGS   += -static
endif

all:    ${TARGETS}

it:	${TARGETS} ${FTARGETS} ${VTARGETS}

$(VAR): %: makedata_% timing_% self_check_%

clean:
	-${RM} ${FTARGETS} ${VTARGETS}

distclean:	clean
	-${RM} .makedep *~

# all explicit ATM
#.makedep:
#	@-echo "building dependencies"
#	@-echo "# autogenerated by Makefile" > .makedep
#	@$(foreach file, $(FSRC), ${CC} ${IDIRS} -MM -MQ${file:.c=}  $(file) >> .makedep;)

xorshift:	xorshift.c
	${CC} ${CFLAGS} $< -o $@ ${LDLIBS} -lm4ri

%$(EXESUFFIX):	%.c Makefile
	${CC} ${CFLAGS} $< -o $@ ${LDFLAGS} ${LDLIBS}

# even hacker

self_check_%:  self_check.c Makefile ../vprng.h ../%.h
	${CC} -DVPRNG_INCLUDE=\"$*.h\" ${CFLAGS} self_check.c -o $@ ${LDLIBS}

makedata_%: makedata.c Makefile ../vprng.h ../%.h
	${CC} -DVPRNG_INCLUDE=\"$*.h\" ${CFLAGS} makedata.c -o $@ ${LDLIBS}

timing_%: timing.c Makefile ../vprng.h ../%.h
	${CC} -DVPRNG_INCLUDE=\"$*.h\" ${CFLAGS} timing.c -o $@ ${LDLIBS}

vprng_testu01:vprng_testu01.c
	${CC} ${CFLAGS} $< -o $@ ${LDLIBS} -lmylib -ltestu01

testu01_%: vprng_testu01.c Makefile ../vprng.h ../%.h
	${CC} -DVPRNG_INCLUDE=\"$*.h\" ${CFLAGS} $< -o $@ ${LDLIBS} -lmylib -ltestu01

help:
	@echo "help            : there is no buildsystem"
	@echo " make           : builds the base version stuff"
	@echo " make it        : tries to build mostly everything"
	@echo " make [var]     : builds the variant version stuff"
	@echo " make clean     : deletes stuff"
	@echo " make distclean : detetes more stuff"
	@echo ""
	@echo "examples:"
	@echo " make           : base version"
	@echo " make vsplitmix : uses ../vsplitmix.h"
	@echo " make foo       : barfs unless you've made a ../foo.h"

#-include .makedep

.PHONY: all it help ${VAR} clean distclean

